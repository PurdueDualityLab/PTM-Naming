{
    "Natural Language Processing": ["AlbertForMaskedLM", "AlbertForQuestionAnswering", "AlbertForSequenceClassification", "AlbertForTokenClassification", "AlbertModel", "BartForConditionalGeneration", "BartForQuestionAnswering", "BartForSequenceClassification", "BartModel", "BertForCL", "BertForMaskedLM", "BertForMultiLabelSequenceClassification", "BertForMultipleChoice", "BertForNextSentencePrediction", "BertForNonlinearSequenceClassification", "BertForPreTraining", "BertForQuestionAnswering", "BertForSequenceClassification", "BertForTokenClassification", "BertForV2QuestionAnswering", "BertLMHeadModel", "BertModel", "BigBirdForMaskedLM", "BigBirdForQuestionAnswering", "BigBirdForSequenceClassification", "BigBirdPegasusForConditionalGeneration", "BlenderbotForConditionalGeneration", "CTRLLMHeadModel", "CamembertForMaskedLM", "CamembertForSequenceClassification", "CamembertForTokenClassification", "CamembertModel", "CanineForTokenClassification", "CodeGenForCausalLM", "DPRContextEncoder", "DPRQuestionEncoder", "DebertaForMaskedLM", "DebertaForQuestionAnswering", "DebertaForSequenceClassification", "DebertaForTokenClassification", "DebertaV2ForMaskedLM", "DebertaV2ForMultipleChoice", "DebertaV2ForQuestionAnswering", "DebertaV2ForSequenceClassification", "DebertaV2ForTokenClassification", "DebertaV2Model", "DistilBertForMaskedLM", "DistilBertForMultilabelSequenceClassification", "DistilBertForMultipleChoice", "DistilBertForQuestionAnswering", "DistilBertForSequenceClassification", "DistilBertForTokenClassification", "DistilBertModel", "DprEncoder", "ElectraForMaskedLM", "ElectraForPreTraining", "ElectraForQuestionAnswering", "ElectraForSequenceClassification", "ElectraForTokenClassification", "ElectraModel", "EsmForMaskedLM", "EsmForSequenceClassification", "EsmForTokenClassification", "FNetForSequenceClassification", "GPT2DoubleHeadsModel", "GPT2ForQuestionAnswering", "GPT2ForSequenceClassification", "GPT2ForTokenClassification", "GPT2LMHeadModel", "GPT2Model", "GPTBigCodeForCausalLM", "GPTJForCausalLM", "GPTNeoForCausalLM", "GPTNeoForSequenceClassification", "GPTNeoModel", "GPTNeoXForCausalLM", "HubertForCTC", "HubertForSequenceClassification", "HubertModel", "LEDForConditionalGeneration", "LSTMForSequenceClassification", "LlamaForCausalLM", "LlamaForSequenceClassification", "LongT5ForConditionalGeneration", "LongformerForMaskedLM", "LongformerForQuestionAnswering", "LongformerForSequenceClassification", "LongformerForTokenClassification", "LongformerModel", "M2M100ForConditionalGeneration", "MBartForConditionalGeneration", "MPNetForMaskedLM", "MPNetForSequenceClassification", "MPNetModel", "MPTForCausalLM", "MT5ForConditionalGeneration", "MarianMTModel", "MobileBertForSequenceClassification", "OPTForCausalLM", "OPTForSequenceClassification", "PLBartForConditionalGeneration", "PegasusForConditionalGeneration", "PegasusXForConditionalGeneration", "RobertaForCL", "RobertaForCausalLM", "RobertaForMaskedLM", "RobertaForMultipleChoice", "RobertaForNonlinearSequenceClassification", "RobertaForQuestionAnswering", "RobertaForSequenceClassification", "RobertaForTokenClassification", "RobertaForV2QuestionAnswering", "RobertaModel", "RwkvForCausalLM", "SplinterForQuestionAnswering", "T5EncoderModel", "T5ForConditionalGeneration", "T5Model", "T5WithLMHeadModel", "XGLMForCausalLM", "XGLMModel", "XLMRobertaForMaskedLM", "XLMRobertaForQuestionAnswering", "XLMRobertaForSequenceClassification", "XLMRobertaForTokenClassification", "XLMRobertaModel", "XLNetForSequenceClassification", "XLNetLMHeadModel"],
    "Computer Vision": ["BeitForImageClassification", "ConvNextForImageClassification", "ConvNextV2ForImageClassification", "DetrForObjectDetection", "GLPNForDepthEstimation", "Mask2FormerForUniversalSegmentation", "MaskFormerForInstanceSegmentation", "MobileNetV2ForImageClassification", "MobileViTForImageClassification", "RegNetForImageClassification", "ResNetForImageClassification", "SegformerForSemanticSegmentation", "SwinForImageClassification", "ViTForImageClassification", "YolosForObjectDetection"],
    "Multimodal": ["Blip2ForConditionalGeneration", "BlipForConditionalGeneration", "CLIPModel", "GitForCausalLM", "LayoutLMForTokenClassification", "LayoutLMv3ForTokenClassification", "LiltForTokenClassification", "LiltModel", "SamModel", "VisionTextDualEncoderModel"],
    "Audio": ["ASTForAudioClassification", "Speech2TextForConditionalGeneration", "SpeechT5ForTextToSpeech", "UniSpeechForCTC", "UniSpeechSatForCTC", "Wav2Vec2ForCTC", "Wav2Vec2ForCTCnCLS", "Wav2Vec2ForPreTraining", "Wav2Vec2ForSequenceClassification", "Wav2Vec2ForSpeechClassification", "Wav2Vec2Model", "WavLMForCTC", "WavLMForSequenceClassification", "WhisperForConditionalGeneration"]
    
}